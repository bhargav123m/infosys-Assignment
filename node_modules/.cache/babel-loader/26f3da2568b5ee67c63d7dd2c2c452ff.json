{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nimport * as invariant_ from 'invariant';\nconst invariant = invariant_.default || invariant_;\nimport { createError, escape } from '../utils';\nimport { TYPE } from 'intl-messageformat-parser';\n/**\n * Escape a raw msg when we run in prod mode\n * https://github.com/formatjs/formatjs/blob/master/packages/intl-messageformat-parser/src/parser.pegjs#L155\n */\n\nfunction escapeUnformattedMessage(msg) {\n  return msg.replace(/'\\{(.*?)\\}'/g, \"{$1}\");\n}\n\nexport function formatMessage({\n  locale,\n  formats,\n  messages,\n  defaultLocale,\n  defaultFormats,\n  onError\n}, state, messageDescriptor = {\n  id: ''\n}, values = {}) {\n  const id = messageDescriptor.id,\n        defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(id, '[React Intl] An `id` must be provided to format a message.');\n  const message = messages && messages[id];\n  const hasValues = Object.keys(values).length > 0; // Avoid expensive message formatting for simple messages without values. In\n  // development messages will always be formatted in case of missing values.\n\n  if (!hasValues && process.env.NODE_ENV === 'production') {\n    const val = message || defaultMessage || id;\n\n    if (typeof val === 'string') {\n      return escapeUnformattedMessage(val);\n    }\n\n    invariant(val.length === 1 && val[0].type === TYPE.literal, 'Message has placeholders but no values was provided');\n    return val[0].value;\n  }\n\n  let formattedMessageParts = [];\n\n  if (message) {\n    try {\n      let formatter = state.getMessageFormat(message, locale, formats, {\n        formatters: state\n      });\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : ''), e));\n    }\n  } else {\n    // This prevents warnings from littering the console in development\n    // when no `messages` are passed into the <IntlProvider> for the\n    // default locale, and a default message is in the source.\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      onError(createError(\"Missing message: \\\"\".concat(id, \"\\\" for locale: \\\"\").concat(locale, \"\\\"\") + (defaultMessage ? ', using default message as fallback.' : '')));\n    }\n  }\n\n  if (!formattedMessageParts.length && defaultMessage) {\n    try {\n      let formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      formattedMessageParts = formatter.formatHTMLMessage(values);\n    } catch (e) {\n      onError(createError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\"\"), e));\n    }\n  }\n\n  if (!formattedMessageParts.length) {\n    onError(createError(\"Cannot format message: \\\"\".concat(id, \"\\\", \") + \"using message \".concat(message || defaultMessage ? 'source' : 'id', \" as fallback.\")));\n\n    if (typeof message === 'string') {\n      return message || defaultMessage || id;\n    }\n\n    return defaultMessage || id;\n  }\n\n  if (formattedMessageParts.length === 1 && typeof formattedMessageParts[0] === 'string') {\n    return formattedMessageParts[0] || defaultMessage || id;\n  }\n\n  return formattedMessageParts;\n}\nexport function formatHTMLMessage(config, state, messageDescriptor = {\n  id: ''\n}, rawValues = {}) {\n  // Process all the values before they are used when formatting the ICU\n  // Message string. Since the formatted message might be injected via\n  // `innerHTML`, all String-based values need to be HTML-escaped.\n  let escapedValues = Object.keys(rawValues).reduce((escaped, name) => {\n    let value = rawValues[name];\n    escaped[name] = typeof value === 'string' ? escape(value) : value;\n    return escaped;\n  }, {});\n  return formatMessage(config, state, messageDescriptor, escapedValues);\n}","map":null,"metadata":{},"sourceType":"module"}